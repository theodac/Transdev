const Exploitation = require("../models/exploitation.model");
const moment = require("moment");

module.exports = {
  async createExploitation(req, res) {
    const {
        nbAccidentsMateriels,
        nbAccidentsCorporels,
        causeAccident,
        tauxControle,
        accidentologieReferenceDossier,
        tauxRecouvrement,
        tauxFraudeTauxControle,
        accidentologieKm,
        dataDate
    } = req.body;

    const newExploitation = new Exploitation({
        nbAccidentsMateriels,
        nbAccidentsCorporels,
        causeAccident,
        tauxControle,
        accidentologieReferenceDossier,
        tauxRecouvrement,
        tauxFraudeTauxControle,
        accidentologieKm,
        dataDate
    });
    await newExploitation.save();

    if (!res)
      return;
    res.status(201).json({
      success: true,
      data: newExploitation,
    });
  },

    async getExploitationByDate(req, res){
        let exploitationEntries = [];
        const { date } = req.params;
        if(date != null){

            exploitationEntries = await Exploitation.find({
            dataDate: {
                    $lte: moment.utc(date)
                }
            });
        }

        if(!exploitationEntries || exploitationEntries.length === 0) {
          return res.status(404).json({
              success: false,
              error: "Exploitation entries not found"
          })
        }

        res.status(200).json({
            success: true,
            data: exploitationEntries,
        });

    },

  async getExploitations(req, res) {
    let exploitationEntries = [];
    if (req.query.startDate) {
      if (req.query.endDate && req.query.endDate !== "") {
        exploitationEntries = await Exploitation.find({
          dataDate: {
            $gte: moment.utc(req.query.startDate),
            $lte: moment.utc(req.query.endDate)
          }
        })
      } else {
        exploitationEntries = await Exploitation.find({dataDate: moment.utc(req.query.startDate)})
      }
    } else 
    exploitationEntries = await Exploitation.find();
    
    if(!exploitationEntries || exploitationEntries.length === 0) {
      return res.status(404).json({
        success: false,
        error: "Exploitation entries not found"
      })
    }

    res.status(200).json({
      success: true,
      data: exploitationEntries,
    });
  },
  async getExploitation(req, res) {
    const { id } = req.params;

    const exploitation = await Exploitation.findById(id);

    if (!exploitation) {
      return res.status(404).json({
        success: false,
        error: "Exploitation entry not found",
      });
    }

    res.status(200).json({
      success: true,
      data: exploitation,
    });
  },
  async updateExploitation(req, res) {
    const { id } = req.params;

    const exploitation = await Exploitation.findByIdAndUpdate(id, req.body, {
      new: true,
    });

    if (!exploitation) {
      return res.status(404).json({
        success: false,
        error: "Exploitation entry not found",
      });
    }

    res.status(200).json({
      success: true,
      data: exploitation,
    });
  },
  async deleteExploitation(req, res) {
    const { id } = req.params;

    const exploitation = await Exploitation.findByIdAndDelete(id);

    if (!exploitation) {
      return res.status(404).json({
        success: false,
        error: "Exploitation entry not found",
      });
    }

    res.status(200).json({
      success: true,
      data: exploitation,
    });
  },
};
